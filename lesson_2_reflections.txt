What happens when you initialize a repository? Why do you need to do it?

	The files present initially are noted. This is to define where we start. There is no tracking yet.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	
	It is not in repository yet. It is in working directory and ready to be moved into repository. So commit will affect only the files that are in staging area.

How can you use the staging area to make sure you have one commit per logical
change?
	Add one file to staging area where there is one logical change. git diff --staged indicates the logical change prior to commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	If I want to make a trial for some idea or make a different view, it is good to keep master while trying them on different branch.

How do the diagrams help you visualize the branch structure?
	Without diagrams, visualizing the structure becomes almost impossible in later stages. Thus possibly we would be lost in commit history!

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	Keeping the branches, we bring them to the same code by looking at initial state and final states of two branches before merge. So we can go on from then on with this single branch. Diagram helps us to visulize the commit history taking care of branches.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
	Automatic merging is good as long as there is no conflict. This is what Git provides.
